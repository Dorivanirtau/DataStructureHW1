import src.avl_template_new
from src.avl_template_new import AVLTreeList
from src.avl_template_new import AVLNode
import random
import collections
import time

def test_BF_after_deletion_alternatly():
    T = AVLTreeList()
    for i in range(99):
        T.insert(0, i)

    for i in range(50):
        if i % 5 == 0:
            T.delete(0)
        elif i % 5 == 1:
            T.delete(T.length() - 1)
        elif i % 5 == 2:
            T.delete((T.length() - 1) // 2)
        elif i % 5 == 3:
            T.delete((T.length() - 1) // 3)
        else:
            T.delete((T.length() - 1) // 7)
        # if abs(T.getRoot().getLeft().getHeight() - T.getRoot().getRight().getHeight()) >= 2:
        #     # T.printt()
        #     print(iter_num)
        # iter_num += 1
        # self.in_order(T, T.getRoot(), self.check_BF)
    print(T.listToArray())
    T.printt()



# test_BF_after_deletion_alternatly()

def testListToArray():
    T = AVLTreeList()
    # t0 = T.sort()
    # print(t0.listToArray())
    # t0.permutation()
    # print(t0.listToArray())
    # for i in range(10):
    #     T.insert(0, i)
    lst = [0, 1,2,3, None, 4,5]
    T1 = AVLTreeList()
    t1 = T1.create_tree_from_array([])
    print(t1.listToArray())
    t1_sorted = t1.sort()
    print(t1_sorted.listToArray())
    t1_permutated = t1_sorted.permutation()
    print(t1_permutated.listToArray())
    # t1_permutated.printt()
    # t = T.sort()
    # print(t.listToArray())
    # t_per = T.permutation()
    # print(t_per.listToArray())
    # T1 = AVLTreeList()
    # for i in range(10):
    #     T1.insert(0, i)
    # T1.sort()
    # print(T1.listToArray())

testListToArray()

# def testSuccessor():
#     T = AVLTreeList()
#     T.insert(0,0)
#     T.insert(1,1)
#     T.getSucsessor()

def rotationCountInsert(number):
    sum_rotations = 0
    t1 = AVLTreeList()
    for i in range(number):
        # random_index = random.randint(0, t1.size)
        sum_rotations += t1.insert(t1.size, i)
    print("tree size" + str(t1.size))
    return sum_rotations

def rotationCountDeletion(number):
    t1 = AVLTreeList()
    for i in range(number):
        t1.insert(0, i)
    sum_rotations = 0
    for i in range(number):
        random_index = random.randint(0, t1.size-1)
        sum_rotations += t1.delete(random_index)
    print("tree size: " + str(t1.size))
    return sum_rotations

def rotationInsertDelete(number):
    t1 = AVLTreeList()

    for i in range(number//2):
        random_index = random.randint(0, t1.size)
        t1.insert(random_index, i)
    sum_rotations = 0
    for i in range(number//2, 3*number//4):
        random_index_insert = random.randint(0, t1.size)
        sum_rotations += t1.insert(random_index_insert, i)
        random_index_delete = random.randint(0, t1.size-1)
        sum_rotations += t1.delete(random_index_delete)
    print("tree size: " + str(t1.size))
    return sum_rotations



# print(rotationInsertDelete(1500*(2**1)))
# print(rotationInsertDelete(1500*(2**2)))
# print(rotationInsertDelete(1500*(2**3)))
# print(rotationInsertDelete(1500*(2**4)))
# print(rotationInsertDelete(1500*(2**5)))
# print(rotationInsertDelete(1500*(2**6)))
# print(rotationInsertDelete(1500*(2**7)))
# print(rotationInsertDelete(1500*(2**8)))
# print(rotationInsertDelete(1500*(2**9)))
# print(rotationInsertDelete(1500*(2**10)))


